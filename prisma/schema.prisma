generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum ActivityType {
  upload
  like
  follow
  create_playlist
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique @db.VarChar(50)
  password     String
  role         Role      @default(user)
  bio          String?
  profileImage String?
  socialLinks  Json?
  isOnline     Boolean   @default(false)
  lastSeen     DateTime?

  playlists  Playlist[]
  songs      Song[]         @relation("UploadedSongs")
  albums     Album[]        @relation("UploadedAlbums")
  comments   Comment[]
  likes      Like[]
  moodTags   MoodTag[]
  followers  Follow[]       @relation("Followers")
  following  Follow[]       @relation("Following")
  activities Activity[]
  songPlays  UserSongPlay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Album {
  id           String    @id @default(uuid())
  title        String
  artist       String
  description  String?
  releaseDate  DateTime?
  coverImage   String?
  uploadedById String
  uploadedBy   User      @relation("UploadedAlbums", fields: [uploadedById], references: [id], onDelete: Cascade)
  songs        Song[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([uploadedById])
  @@index([title])
  @@index([artist])
}

model Song {
  id           String   @id @default(uuid())
  title        String
  artist       String
  genre        String   @db.VarChar(30)
  releaseDate  DateTime
  coverImage   String
  fileUrl      String
  uploadedById String
  uploadedBy   User     @relation("UploadedSongs", fields: [uploadedById], references: [id])

  albumId     String?
  album       Album?  @relation(fields: [albumId], references: [id], onDelete: SetNull)
  trackNumber Int?
  discNumber  Int?

  playlists PlaylistSong[]
  analytics Analytics?
  lyrics    Lyrics?
  comments  Comment[]
  moodTags  MoodTag[]
  likes     Like[]
  searchKey String         @default("") @db.VarChar(256)

  userPlays UserSongPlay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, artist, albumId]) // کلید مرکب مناسب آلبوم
  @@index([title])
  @@index([artist])
  @@index([genre])
  @@index([searchKey])
  @@index([albumId, trackNumber])
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User    @relation(fields: [ownerId], references: [id])

  songs PlaylistSong[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, name])
  @@index([ownerId])
}

model PlaylistSong {
  playlistId String
  songId     String
  createdAt  DateTime @default(now())

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song     Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([playlistId, songId])
}

model Analytics {
  id              String   @id @default(uuid())
  songId          String   @unique
  song            Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  playCount       Int      @default(0)
  uniqueListeners Int      @default(0)
  lastPlayed      DateTime @default(now())
}

model Lyrics {
  songId     String
  lyricsText String
  song       Song   @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([songId])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  songId    String
  text      String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@index([songId])
  @@index([userId])
}

model MoodTag {
  userId    String
  songId    String
  tag       String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([userId, songId, tag])
}

model Like {
  userId    String
  songId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([userId, songId])
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model Activity {
  id        String       @id @default(uuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      ActivityType
  createdAt DateTime     @default(now())

  @@index([userId])
  @@index([type])
}

model UserSongPlay {
  userId        String
  songId        String
  firstPlayedAt DateTime @default(now())
  lastPlayedAt  DateTime @default(now())
  playCount     Int      @default(1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([userId, songId])
  @@index([songId])
}
